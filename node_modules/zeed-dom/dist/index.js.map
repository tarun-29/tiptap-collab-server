{"version":3,"sources":["../src/vcss.ts","../src/vdom.ts","../src/utils.ts","../src/htmlparser.ts","../src/vdomparser.ts","../src/tidy.ts","../src/xml.ts"],"sourcesContent":["// (C)opyright 2021-07-20 Dirk Holtwick, holtwick.it. All rights reserved.\n\nimport { parse } from \"css-what\"\nimport { VElement } from \"./vdom\"\n\n// Alternative could be https://github.com/leaverou/parsel\n\nlet cache = {}\n\nexport function parseSelector(selector: string) {\n  let ast = cache[selector]\n  if (ast == null) {\n    ast = parse(selector)\n    cache[selector] = ast\n  }\n  return ast\n}\n\n// Just a very small subset for now: https://github.com/fb55/css-what#api\n\nexport function matchSelector(\n  selector: string,\n  element: VElement,\n  { debug = false } = {}\n) {\n  for (let rules of parseSelector(selector)) {\n    if (debug) {\n      console.log(\"Selector:\", selector)\n      console.log(\"Rules:\", rules)\n      console.log(\"Element:\", element)\n    }\n\n    const handleRules = (element: VElement, rules: any[]) => {\n      let success: boolean = false\n      for (let part of rules) {\n        const { type, name, action, value, ignoreCase = true, data } = part\n        if (type === \"attribute\") {\n          if (action === \"equals\") {\n            success = element.getAttribute(name) === value\n            if (debug) console.log(\"Attribute equals\", success)\n          } else if (action === \"start\") {\n            success = !!element.getAttribute(name)?.startsWith(value)\n            if (debug) console.log(\"Attribute start\", success)\n          } else if (action === \"end\") {\n            success = !!element.getAttribute(name)?.endsWith(value)\n            if (debug) console.log(\"Attribute start\", success)\n          } else if (action === \"element\") {\n            if (name === \"class\") {\n              success = element.classList.contains(value)\n              if (debug) console.log(\"Attribute class\", success)\n            } else {\n              success = !!element.getAttribute(name)?.includes(value)\n              if (debug) console.log(\"Attribute element\", success)\n            }\n          } else if (action === \"exists\") {\n            success = element.hasAttribute(name)\n            if (debug) console.log(\"Attribute exists\", success)\n          } else {\n            console.warn(\"Unknown CSS selector action\", action)\n          }\n        } else if (type === \"tag\") {\n          success = element.tagName === name.toUpperCase()\n          if (debug) console.log(\"Is tag\", success)\n        } else if (type === \"universal\") {\n          success = true\n          if (debug) console.log(\"Is universal\", success)\n        } else if (type === \"pseudo\") {\n          if (name === \"not\") {\n            let ok = true\n            data.forEach((rules) => {\n              if (!handleRules(element, rules)) {\n                ok = false\n              }\n            })\n            success = !ok\n          }\n          if (debug) console.log(\"Is :not\", success)\n          // } else if (type === 'descendant') {\n          //   element = element.\n        } else {\n          console.warn(\"Unknown CSS selector type\", type, selector, rules)\n        }\n        // console.log(success, selector, part, element)\n        if (!success) break\n      }\n      return success\n    }\n\n    if (handleRules(element, rules)) {\n      return true\n    }\n  }\n  return false\n}\n","// Copyright (c) 2020 Dirk Holtwick. All rights reserved. https://holtwick.de/copyright\n\nimport { escapeHTML } from \"./encoding\"\nimport { hFactory } from \"./h\"\nimport { html, htmlVDOM } from \"./html\"\nimport { matchSelector } from \"./vcss\"\n\n// For node debugging\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\")\n\nlet B = { fontWeight: \"bold\" }\nlet I = { fontStyle: \"italic\" }\nlet M = { backgroundColor: \"rgb(255, 250, 165)\" }\nlet U = { textDecorations: \"underline\" }\nlet S = { textDecorations: \"line-through\" }\n// let C = {}\n\nlet DEFAULTS = {\n  b: B,\n  strong: B,\n  em: I,\n  i: I,\n  mark: M,\n  u: U,\n  a: U,\n  s: S,\n  del: S,\n  ins: M,\n  strike: S,\n  // 'code': C,\n  // 'tt': C\n}\n\nlet toCamelCase = (s: string) =>\n  s.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase())\n\nexport class VNode {\n  static ELEMENT_NODE = 1\n  static TEXT_NODE = 3\n  static CDATA_SECTION_NODE = 4\n  static PROCESSING_INSTRUCTION_NODE = 7\n  static COMMENT_NODE = 8\n  static DOCUMENT_NODE = 9\n  static DOCUMENT_TYPE_NODE = 10\n  static DOCUMENT_FRAGMENT_NODE = 11\n\n  _parentNode: any\n  _childNodes: any[]\n\n  get nodeType(): number {\n    console.error(\"Subclasses should define nodeType!\")\n    return 0\n  }\n\n  get nodeName() {\n    console.error(\"Subclasses should define nodeName!\")\n    return \"\"\n  }\n\n  get nodeValue(): string | null {\n    return null\n  }\n\n  constructor() {\n    this._parentNode = null\n    this._childNodes = []\n  }\n\n  cloneNode(deep = false) {\n    // @ts-ignore\n    let node = new this.constructor()\n    if (deep) {\n      node._childNodes = this._childNodes.map((c) => c.cloneNode(true))\n      node._fixChildNodesParent()\n    }\n    return node\n  }\n\n  _fixChildNodesParent() {\n    this._childNodes.forEach((node) => (node._parentNode = this))\n  }\n\n  insertBefore(newNode: VNode, node?: VNode) {\n    if (newNode !== node) {\n      let index = node ? this._childNodes.indexOf(node) : 0\n      if (index < 0) index = 0\n      this._childNodes.splice(index, 0, newNode)\n      this._fixChildNodesParent()\n    }\n  }\n\n  appendChild(node: VNode | VNode[] | string | string[] | null | undefined) {\n    if (node == null) return\n    if (node === this) {\n      console.warn(\"Cannot appendChild to self\")\n      return\n    }\n    // log('appendChild', node, this)\n\n    if (node instanceof VDocument) {\n      console.warn(\"No defined how to append a document to a node!\", node)\n    }\n\n    if (node instanceof VDocumentFragment) {\n      for (let c of [...node._childNodes]) {\n        // Don't iterate over the original! Do [...el]\n        this.appendChild(c)\n      }\n    } else if (Array.isArray(node)) {\n      for (let c of [...node]) {\n        // Don't iterate over the original! Do [...el]\n        this.appendChild(c)\n      }\n    } else if (node instanceof VNode) {\n      node.remove()\n      this._childNodes.push(node)\n    } else {\n      // Fallback for unknown data\n      try {\n        const text =\n          typeof node === \"string\" ? node : JSON.stringify(node, null, 2)\n        this._childNodes.push(new VTextNode(text))\n      } catch (err) {\n        console.error(\n          `The data ${node} to be added to ${this.render()} is problematic: ${err}`\n        )\n      }\n    }\n    this._fixChildNodesParent()\n  }\n\n  append = this.appendChild\n\n  removeChild(node: { _parentNode: null }) {\n    let i = this._childNodes.indexOf(node)\n    if (i >= 0) {\n      node._parentNode = null\n      this._childNodes.splice(i, 1)\n      this._fixChildNodesParent()\n    }\n  }\n\n  remove() {\n    this?.parentNode?.removeChild(this)\n    return this\n  }\n\n  replaceChildren(...nodes: any[]) {\n    this._childNodes = nodes.map((n) =>\n      typeof n === \"string\" ? new VTextNode(n) : n.remove()\n    )\n    this._fixChildNodesParent()\n  }\n\n  replaceWith(...nodes: any[]) {\n    let p = this._parentNode\n    if (p) {\n      let index = this._indexInParent()\n      if (index >= 0) {\n        nodes = nodes.map((n) =>\n          typeof n === \"string\" ? new VTextNode(n) : n.remove()\n        )\n        p._childNodes.splice(index, 1, ...nodes)\n        this._parentNode = null\n        p._fixChildNodesParent()\n      }\n    }\n  }\n\n  _indexInParent() {\n    if (this._parentNode) {\n      return this._parentNode.childNodes.indexOf(this)\n    }\n    return -1\n  }\n\n  get parentNode() {\n    return this._parentNode\n  }\n\n  get childNodes() {\n    return this._childNodes || []\n  }\n\n  get children() {\n    return this._childNodes || []\n  }\n\n  get firstChild() {\n    return this._childNodes[0]\n  }\n\n  get lastChild() {\n    return this._childNodes[this._childNodes.length - 1]\n  }\n\n  get nextSibling() {\n    let i = this._indexInParent()\n    if (i != null) {\n      return this.parentNode.childNodes[i + 1] || null\n    }\n    return null\n  }\n\n  get previousSibling() {\n    let i = this._indexInParent()\n    if (i > 0) {\n      return this.parentNode.childNodes[i - 1] || null\n    }\n    return null\n  }\n\n  flatten(): VElement[] {\n    let elements: VElement[] = []\n    if (this instanceof VElement) {\n      elements.push(this)\n    }\n    for (let child of this._childNodes) {\n      elements.push(...child.flatten())\n    }\n    return elements\n  }\n\n  flattenNodes(): VNode[] {\n    let nodes: VNode[] = []\n    nodes.push(this)\n    for (let child of this._childNodes) {\n      nodes.push(...child.flattenNodes())\n    }\n    return nodes\n  }\n\n  render() {\n    return \"\"\n  }\n\n  get textContent(): string | null {\n    return this._childNodes.map((c) => c.textContent).join(\"\")\n  }\n\n  set textContent(text) {\n    this._childNodes = []\n    if (text) {\n      this.appendChild(new VTextNode(text.toString()))\n    }\n  }\n\n  contains(otherNode: this) {\n    if (otherNode === this) return true\n    // if (this._childNodes.includes(otherNode)) return true\n    return this._childNodes.some((n) => n.contains(otherNode))\n  }\n\n  get ownerDocument() {\n    if (\n      this.nodeType === VNode.DOCUMENT_NODE ||\n      this.nodeType === VNode.DOCUMENT_FRAGMENT_NODE\n    ) {\n      return this\n    }\n    return this?._parentNode?.ownerDocument\n  }\n\n  toString(): string {\n    return `${this.nodeName}`\n    // return `${this.nodeName}: ${JSON.stringify(this.nodeValue)}`\n  }\n\n  [inspect]() {\n    return `${this.constructor.name} \"${this.render()}\"`\n  }\n}\n\nexport class VTextNode extends VNode {\n  _text: string\n\n  get nodeType(): number {\n    return VNode.TEXT_NODE\n  }\n\n  get nodeName() {\n    return \"#text\"\n  }\n\n  get nodeValue(): string | null {\n    return this._text || \"\"\n  }\n\n  get textContent(): string | null {\n    return this.nodeValue\n  }\n\n  constructor(text = \"\") {\n    super()\n    this._text = text\n  }\n\n  render() {\n    const parentTagName = this.parentNode?.tagName\n    if (parentTagName === \"SCRIPT\" || parentTagName === \"STYLE\") {\n      return this._text\n    }\n    return escapeHTML(this._text)\n  }\n\n  cloneNode(deep = false) {\n    let node = super.cloneNode(deep)\n    node._text = this._text\n    return node\n  }\n}\n\nexport class VNodeQuery extends VNode {\n  getElementById(name: string) {\n    return this.flatten().find((e) => e._attributes[\"id\"] === name)\n  }\n\n  getElementsByClassName(name: any) {\n    return this.flatten().filter((e) => e.classList.contains(name))\n  }\n\n  matches(selector: string) {\n    return matchSelector(selector, this as any)\n  }\n\n  querySelectorAll(selector: any) {\n    return this.flatten().filter((e) => e.matches(selector))\n  }\n\n  querySelector(selector: string) {\n    return this.flatten().find((e) => e.matches(selector))\n  }\n\n  //\n\n  parent(selector: string) {\n    if (this.matches(selector)) {\n      return this\n    }\n    if (this.parentNode == null) {\n      return null\n    }\n    return this.parentNode?.parent(selector)\n  }\n\n  handle(selector: any, handler: (arg0: VElement, arg1: number) => void) {\n    let i = 0\n    for (let el of this.querySelectorAll(selector)) {\n      handler(el, i++)\n    }\n  }\n}\n\nexport class VElement extends VNodeQuery {\n  _originalTagName: string\n  _nodeName: any\n  _attributes: Record<string, string>\n  _styles: any\n\n  get nodeType() {\n    return VNode.ELEMENT_NODE\n  }\n\n  get nodeName() {\n    return this._nodeName\n  }\n\n  constructor(name = \"div\", attrs = {}) {\n    super()\n    this._originalTagName = name\n    this._nodeName = (name || \"\").toUpperCase()\n    this._attributes = attrs || {}\n    this._styles = null\n  }\n\n  cloneNode(deep = false) {\n    let node = super.cloneNode(deep)\n    node._originalTagName = this._originalTagName\n    node._nodeName = this._nodeName\n    node._attributes = Object.assign({}, this._attributes)\n    return node\n  }\n\n  get attributes() {\n    return this._attributes\n  }\n\n  _findAttributeName(name: string) {\n    const search = name.toLowerCase()\n    return (\n      Object.keys(this._attributes).find(\n        (name) => search === name.toLowerCase()\n      ) || null\n    )\n  }\n\n  setAttribute(name: string, value: string) {\n    this.removeAttribute(name)\n    this._attributes[name] = value\n    this._styles = null\n  }\n\n  getAttribute(name: string): string | null {\n    const originalName = this._findAttributeName(name)\n    return originalName ? this._attributes[originalName] : null\n  }\n\n  removeAttribute(name: string | number) {\n    const originalName = this._findAttributeName(String(name))\n    if (originalName) {\n      delete this._attributes[name]\n    }\n  }\n\n  hasAttribute(name: any) {\n    const originalName = this._findAttributeName(name)\n    return originalName ? this._attributes[originalName] != null : false\n  }\n\n  get style() {\n    if (this._styles == null) {\n      let styles = Object.assign({}, DEFAULTS[this.tagName.toLowerCase()] || {})\n      let styleString = this.getAttribute(\"style\")\n      if (styleString) {\n        let m: string[] | null\n        let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g\n        while ((m = re.exec(styleString))) {\n          let name = m[1]\n          let value = m[2].trim()\n          styles[name] = value\n          styles[toCamelCase(name)] = value\n        }\n      }\n      this._styles = styles\n    }\n    return this._styles\n  }\n\n  get tagName() {\n    return this._nodeName\n  }\n\n  get id(): string | null {\n    return this._attributes.id || null\n  }\n\n  set id(value: string | null) {\n    if (value == null) delete this._attributes.id\n    else this._attributes.id = value\n  }\n\n  get src(): string | null {\n    return this._attributes.src\n  }\n\n  set src(value: string | null) {\n    if (value == null) delete this._attributes.src\n    else this._attributes.src = value\n  }\n\n  //\n\n  getElementsByTagName(name: string) {\n    name = name.toUpperCase()\n    let elements = this.flatten()\n    if (name !== \"*\") {\n      return elements.filter((e) => e.tagName === name)\n    }\n    return elements\n  }\n\n  // html\n\n  setInnerHTML(html: string) {\n    throw \"setInnerHTML is not implemented; see vdomparser for an example\"\n  }\n\n  get innerHTML() {\n    return this._childNodes.map((c) => c.render(html)).join(\"\")\n  }\n\n  set innerHTML(html) {\n    this.setInnerHTML(html)\n  }\n\n  get outerHTML() {\n    return this.render(htmlVDOM)\n  }\n\n  // class\n\n  get className(): string {\n    return this._attributes[\"class\"] || \"\"\n  }\n\n  set className(name: string | string[]) {\n    if (Array.isArray(name)) {\n      name = name.filter((n) => !!n).join(\" \")\n    } else if (typeof name === \"object\") {\n      name = Object.entries(name)\n        .filter(([k, v]) => !!v)\n        .map(([k, v]) => k)\n        .join(\" \")\n    }\n    this._attributes[\"class\"] = name\n  }\n\n  get classList() {\n    let self = this\n    let classNames = (this.className || \"\").trim().split(/\\s+/g) || []\n    // log('classList', classNames)\n    return {\n      contains(s: any) {\n        return classNames.includes(s)\n      },\n      add(s: any) {\n        if (!classNames.includes(s)) {\n          classNames.push(s)\n          self.className = classNames\n        }\n      },\n      remove(s: any) {\n        let index = classNames.indexOf(s)\n        if (index >= 0) {\n          classNames.splice(index, 1)\n          self.className = classNames\n        }\n      },\n    }\n  }\n\n  //\n\n  render(h = htmlVDOM) {\n    return h(\n      this._originalTagName || this.tagName,\n      this.attributes,\n      this._childNodes.map((c) => c.render(h)).join(\"\") // children:string is not escaped again\n    )\n  }\n}\n\nexport class VDocType extends VNode {\n  //todo\n\n  name: any\n  publicId: any\n  systemId: any\n\n  get nodeName(): string {\n    return super.nodeName\n  }\n\n  get nodeValue(): string | null {\n    return super.nodeValue\n  }\n\n  get nodeType(): number {\n    return VDocType.DOCUMENT_TYPE_NODE\n  }\n\n  render() {\n    return `<!DOCTYPE html>` // hack!\n  }\n}\n\nexport class VDocumentFragment extends VNodeQuery {\n  docType: VDocType\n\n  get nodeType() {\n    return VNode.DOCUMENT_FRAGMENT_NODE\n  }\n\n  get nodeName() {\n    return \"#document-fragment\"\n  }\n\n  render(h = htmlVDOM) {\n    return this._childNodes.map((c) => c.render(h) || []).join(\"\")\n  }\n\n  get innerHTML() {\n    // for debug\n    return this._childNodes.map((c) => c.render(html)).join(\"\")\n  }\n\n  createElement(name: string, attrs = {}) {\n    return new VElement(name, attrs)\n  }\n\n  createDocumentFragment() {\n    return new VDocumentFragment()\n  }\n\n  createTextNode(text?: string) {\n    return new VTextNode(text)\n  }\n}\n\nexport class VDocument extends VDocumentFragment {\n  get nodeType() {\n    return VNode.DOCUMENT_NODE\n  }\n\n  get nodeName() {\n    return \"#document\"\n  }\n\n  get documentElement() {\n    return this.firstChild\n  }\n\n  render(h = htmlVDOM) {\n    let content = super.render(h)\n    if (this.docType) {\n      content = this.docType.render() + content\n    }\n    return content\n  }\n}\n\nexport class VHTMLDocument extends VDocument {\n  constructor(empty: boolean = false) {\n    super()\n    this.docType = new VDocType()\n    if (!empty) {\n      let html = new VElement(\"html\")\n      let body = new VElement(\"body\")\n      let head = new VElement(\"head\")\n      let title = new VElement(\"title\")\n      html.appendChild(head)\n      head.appendChild(title)\n      html.appendChild(body)\n      this.appendChild(html)\n    }\n  }\n\n  get body(): VElement {\n    let body = this.querySelector(\"body\")\n    if (!body) {\n      let html = this.querySelector(\"html\")\n      if (!html) {\n        html = new VElement(\"html\")\n        this.appendChild(html)\n      }\n      body = new VElement(\"body\")\n      html.appendChild(html)\n    }\n    return body\n  }\n\n  get title(): string {\n    return this.querySelector(\"title\")?.textContent || \"\"\n  }\n\n  set title(title: string) {\n    const titleElement = this.querySelector(\"title\")\n    if (titleElement) titleElement.textContent = title\n  }\n\n  get head(): VElement {\n    let head = this.querySelector(\"head\")\n    if (!head) {\n      let html = this.querySelector(\"html\")\n      if (!html) {\n        html = new VElement(\"html\")\n        this.appendChild(html)\n      }\n      head = new VElement(\"head\")\n      html.insertBefore(html)\n    }\n    return head\n  }\n}\n\nexport function createDocument(): VDocument {\n  return new VDocument()\n}\n\nexport function createHTMLDocument(): VHTMLDocument {\n  return new VHTMLDocument()\n}\n\nexport let document = createDocument()\nexport let h = hFactory({ document })\n","// (C)opyright 2021-07-20 Dirk Holtwick, holtwick.it. All rights reserved.\n\nimport { VDocumentFragment, VNodeQuery } from \"./vdom\"\n\nexport function removeBodyContainer(body: VNodeQuery): VNodeQuery {\n  let ehead = body.querySelector(\"head\")\n  let ebody = body.querySelector(\"body\")\n  if (ebody || ehead) {\n    let body = new VDocumentFragment()\n    ehead && body.appendChild(ehead.childNodes)\n    ebody && body.appendChild(ebody.children)\n    return body\n  }\n  return body\n}\n","// Taken from https://github.com/creeperyang/html-parser-lite\n// and slightly modified. Original also under MIT license. Thanks.\n\n// attribute, like href=\"javascript:void(0)\"\n// 1. start with name (not empty and not =)\n// 2. and then \\s*=\\s*\n// 3. and value can be \"value\" | 'value' | value\n// 4. 2 and 3 are optional\nconst attrRe = /([^=\\s]+)(\\s*=\\s*((\"([^\"]*)\")|('([^']*)')|[^>\\s]+))?/gm\nconst endTagRe = /^<\\/([^>\\s]+)[^>]*>/m\n// start tag, like <a href=\"link\"> <img/>\n// 1. must start with <tagName\n// 2. optional attrbutes\n// 3. /> or >\nconst startTagRe =\n  /^<([^>\\s\\/]+)((\\s+[^=>\\s]+(\\s*=\\s*((\"[^\"]*\")|('[^']*')|[^>\\s]+))?)*)\\s*\\/?\\s*>/m\nconst selfCloseTagRe = /\\s*\\/\\s*>\\s*$/m\n\n/**\n * This is a simple html parser. Will read and parse html string.\n *\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\nexport class HtmlParser {\n  scanner: any\n  options: any\n  attrRe = attrRe\n  endTagRe = endTagRe\n  startTagRe = startTagRe\n  defaults = { ignoreWhitespaceText: false }\n\n  constructor(options) {\n    options = options || {}\n    if (options.scanner) {\n      this.scanner = options.scanner\n      options.scanner = null\n    }\n    this.options = Object.assign({}, this.defaults, options)\n  }\n\n  parse(html: string) {\n    let treatAsChars = false\n    let index, match, characters\n    while (html.length) {\n      // comment\n      if (html.substring(0, 4) === \"<!--\") {\n        index = html.indexOf(\"-->\")\n        if (index !== -1) {\n          this.scanner.comment(html.substring(4, index))\n          html = html.substring(index + 3)\n          treatAsChars = false\n        } else {\n          treatAsChars = true\n        }\n      }\n      // end tag\n      else if (html.substring(0, 2) === \"</\") {\n        match = this.endTagRe.exec(html)\n        if (match) {\n          // @ts-ignore\n          html = RegExp.rightContext\n          treatAsChars = false\n          this.parseEndTag(RegExp.lastMatch, match[1])\n        } else {\n          treatAsChars = true\n        }\n      }\n      // start tag\n      else if (html.charAt(0) === \"<\") {\n        match = this.startTagRe.exec(html)\n        if (match) {\n          // @ts-ignore\n          html = RegExp.rightContext\n          treatAsChars = false\n          this.parseStartTag(RegExp.lastMatch, match[1], match)\n        } else {\n          treatAsChars = true\n        }\n      }\n\n      if (treatAsChars) {\n        index = html.indexOf(\"<\")\n\n        if (index === 0) {\n          // First char is a < so find the next one\n          index = html.substring(1).indexOf(\"<\")\n        }\n\n        if (index === -1) {\n          characters = html\n          html = \"\"\n        } else {\n          characters = html.substring(0, index)\n          html = html.substring(index)\n        }\n\n        if (!this.options.ignoreWhitespaceText || !/^\\s*$/.test(characters)) {\n          this.scanner.characters(characters)\n        }\n      }\n\n      treatAsChars = true\n      match = null\n    }\n  }\n\n  parseStartTag(input, tagName, match) {\n    const isSelfColse = selfCloseTagRe.test(input)\n    let attrInput = match[2]\n    if (isSelfColse) {\n      attrInput = attrInput.replace(/\\s*\\/\\s*$/, \"\")\n    }\n    const attrs = this.parseAttributes(tagName, attrInput)\n    this.scanner.startElement(tagName, attrs, isSelfColse, match[0])\n  }\n\n  parseEndTag(input, tagName: string) {\n    this.scanner.endElement(tagName)\n  }\n\n  parseAttributes(tagName, input) {\n    const attrs = {}\n    input.replace(\n      this.attrRe,\n      (attr, name, c2, value, c4, valueInQuote, c6, valueInSingleQuote) => {\n        attrs[name] = valueInSingleQuote ?? valueInQuote ?? value ?? true\n      }\n    )\n    return attrs\n  }\n}\n","// Copyright (c) 2020 Dirk Holtwick. All rights reserved. https://holtwick.de/copyright\n\nimport { unescapeHTML } from \"./encoding\"\nimport { SELF_CLOSING_TAGS } from \"./html\"\nimport { HtmlParser } from \"./htmlparser\"\nimport {\n  document,\n  VDocType,\n  VDocumentFragment,\n  VElement,\n  VHTMLDocument,\n  VNode,\n  VTextNode,\n} from \"./vdom\"\n\n// Makes sure we operate on VNodes\nexport function vdom(obj: VNode | Buffer | string | null = null): VNode {\n  if (obj instanceof VNode) {\n    return obj\n  }\n  if (obj instanceof Buffer) {\n    obj = obj.toString(\"utf-8\")\n  }\n  if (typeof obj === \"string\") {\n    return parseHTML(obj)\n  }\n  // console.warn('Cannot convert to VDOM:', obj)\n  return new VDocumentFragment()\n}\n\nexport function parseHTML(html: string): VDocumentFragment | VHTMLDocument {\n  if (typeof html !== \"string\") {\n    console.error(\"parseHTML requires string, found\", html)\n    throw new Error(\"parseHTML requires string\")\n  }\n\n  let frag =\n    html.indexOf(\"<!\") === 0 ? new VHTMLDocument(true) : new VDocumentFragment() // !hack\n\n  let stack: VNode[] = [frag]\n\n  let parser = new HtmlParser({\n    // the for methods must be implemented yourself\n    scanner: {\n      startElement(\n        tagName: string,\n        attrs: Record<string, string>,\n        isSelfClosing: boolean\n      ) {\n        const lowerTagName = tagName.toLowerCase()\n\n        if (lowerTagName === \"!doctype\") {\n          frag.docType = new VDocType()\n          return\n        }\n\n        for (let name in attrs) {\n          if (attrs.hasOwnProperty(name)) {\n            let value = attrs[name]\n            // console.log(name, value)\n            if (typeof value === \"string\") {\n              attrs[name] = unescapeHTML(value)\n            }\n          }\n        }\n        let parentNode = stack[stack.length - 1]\n        if (parentNode) {\n          const element = document.createElement(tagName, attrs)\n          parentNode.appendChild(element)\n          if (\n            !(\n              SELF_CLOSING_TAGS.includes(tagName.toLowerCase()) || isSelfClosing\n            )\n          ) {\n            stack.push(element)\n          }\n        }\n      },\n      endElement(tagName: string) {\n        stack.pop()\n      },\n      characters(text: string) {\n        text = unescapeHTML(text)\n        let parentNode = stack[stack.length - 1]\n        if (parentNode?.lastChild?.nodeType === VNode.TEXT_NODE) {\n          parentNode.lastChild._text += text\n        } else {\n          if (parentNode) {\n            parentNode.appendChild(new VTextNode(text))\n            // } else {\n            //   console.trace(parentNode, stack)\n          }\n        }\n      },\n      comment(text: string) {},\n    },\n  })\n  parser.parse(html)\n  // console.log(\"frag\", frag)\n  return frag\n}\n\n// export function parseHTML2(html) {\n//   let frag = new VDocumentFragment()\n//\n//   let stack = [frag]\n//   let currentElement = frag\n//\n//   let parser = new Parser({\n//     onopentag: (name, attrs) => {\n//       let element = document.createElement(name, attrs)\n//       stack.push(element)\n//       currentElement.appendChild(element)\n//       currentElement = element\n//     },\n//     ontext: function (text) {\n//       if (currentElement?.lastChild?.nodeType === VNode.TEXT_NODE) {\n//         currentElement.lastChild._text += text\n//       } else {\n//         currentElement.appendChild(new VTextNode(text))\n//       }\n//     },\n//     onclosetag: function (name) {\n//       let element = stack.pop()\n//       currentElement = stack[stack.length - 1]\n//       // if (element.nodeName !== currentElement.nodeName) {\n//       //   console.log('error', element, currentElement)\n//       // }\n//     },\n//   }, { decodeEntities: true })\n//   parser.write(html)\n//   parser.end()\n//\n//   // console.log('frag', frag.innerHTML)\n//\n//   return frag\n// }\n\nVElement.prototype.setInnerHTML = function (html) {\n  let frag = parseHTML(html)\n  this._childNodes = frag._childNodes\n  this._fixChildNodesParent()\n}\n","// (C)opyright 2021-07-20 Dirk Holtwick, holtwick.it. All rights reserved.\n\nimport { VDocument, VNode, VTextNode } from \"./vdom\"\n\nconst SELECTOR_BLOCK_ELEMENTS =\n  \"meta,link,script,p,h1,h2,h3,h4,h5,h6,blockquote,div,ul,ol,li,article,section,footer,head,body,title,nav,section,article,hr,form\"\nconst TAGS_KEEP_CONTENT = [\"PRE\", \"CODE\", \"SCRIPT\", \"STYLE\", \"TT\"]\n\nfunction level(element: VNode): string {\n  let indent = \"\"\n  while (element.parentNode) {\n    indent += \"  \"\n    element = element.parentNode\n  }\n  return indent.substr(2)\n}\n\nexport function tidyDOM(document: VDocument) {\n  document.handle(SELECTOR_BLOCK_ELEMENTS, (e) => {\n    // Ignore if inside PRE etc.\n    let ee = e\n    while (ee) {\n      if (TAGS_KEEP_CONTENT.includes(ee.tagName)) return\n      ee = ee.parentNode\n    }\n\n    let prev = e.previousSibling\n    if (\n      !prev ||\n      prev.nodeType !== VNode.TEXT_NODE ||\n      !prev.nodeValue?.endsWith(\"\\n\")\n    ) {\n      e.parentNode?.insertBefore(new VTextNode(\"\\n\"), e)\n    }\n    e.parentNode?.insertBefore(new VTextNode(level(e)), e)\n\n    let next = e.nextSibling\n    if (\n      !next ||\n      next.nodeType !== VNode.TEXT_NODE ||\n      !next.nodeValue?.startsWith(\"\\n\")\n    ) {\n      if (next) {\n        e.parentNode?.insertBefore(new VTextNode(\"\\n\"), next)\n      } else {\n        e.parentNode?.appendChild(new VTextNode(\"\\n\"))\n      }\n    }\n\n    if (e.childNodes.length) {\n      let first = e.firstChild\n      if (first.nodeType === VNode.TEXT_NODE) {\n        e.insertBefore(new VTextNode(\"\\n\" + level(e) + \"  \"))\n      }\n      e.appendChild(new VTextNode(\"\\n\" + level(e)))\n    }\n  })\n}\n","// (C)opyright 2021-07-20 Dirk Holtwick, holtwick.it. All rights reserved.\n\nimport { hArgumentParser } from \"./h\"\nimport { markup } from \"./html\"\n\nexport function xml(itag: string, iattrs?: object, ...ichildren: any[]) {\n  let { tag, attrs, children } = hArgumentParser(itag, iattrs, ichildren)\n  return markup(true, tag, attrs, children)\n}\n\n// export const xmlVDOM = markup.bind(null, true)\n\nxml.firstLine = '<?xml version=\"1.0\" encoding=\"utf-8\"?>'\nxml.xml = true\n\nexport let h = xml\n"],"mappings":"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","names":["element","rules","name","html","h","body","html","html","document"]}