import { Doc, encodeStateAsUpdate, applyUpdate } from 'yjs';
import { yDocToProsemirrorJSON, prosemirrorJSONToYDoc } from 'y-prosemirror';
import { Schema } from 'prosemirror-model';
import { getSchema } from '@tiptap/core';
import StarterKit from '@tiptap/starter-kit';

class Prosemirror {
    constructor() {
        this.defaultSchema = new Schema({
            nodes: {
                text: {},
                doc: { content: 'text*' },
            },
        });
    }
    schema(schema) {
        this.defaultSchema = schema;
        return this;
    }
    fromYdoc(document, fieldName) {
        const data = {};
        // allow a single field name
        if (typeof fieldName === 'string') {
            return yDocToProsemirrorJSON(document, fieldName);
        }
        // default to all available fields if the given field name is empty
        if (fieldName === undefined || fieldName.length === 0) {
            fieldName = Array.from(document.share.keys());
        }
        fieldName.forEach(field => {
            // @ts-ignore
            data[field] = yDocToProsemirrorJSON(document, field);
        });
        return data;
    }
    toYdoc(document, fieldName = 'prosemirror', schema) {
        if (!document) {
            throw new Error(`Youâ€™ve passed an empty or invalid document to the Transformer. Make sure to pass ProseMirror-compatible JSON. Actually passed JSON: ${document}`);
        }
        // allow a single field name
        if (typeof fieldName === 'string') {
            return prosemirrorJSONToYDoc(schema || this.defaultSchema, document, fieldName);
        }
        const ydoc = new Doc();
        fieldName.forEach(field => {
            const update = encodeStateAsUpdate(prosemirrorJSONToYDoc(schema || this.defaultSchema, document, field));
            applyUpdate(ydoc, update);
        });
        return ydoc;
    }
}
const ProsemirrorTransformer = new Prosemirror();

class Tiptap {
    constructor() {
        this.defaultExtensions = [
            StarterKit,
        ];
    }
    extensions(extensions) {
        this.defaultExtensions = extensions;
        return this;
    }
    fromYdoc(document, fieldName) {
        return ProsemirrorTransformer.fromYdoc(document, fieldName);
    }
    toYdoc(document, fieldName = 'default', extensions) {
        return ProsemirrorTransformer.toYdoc(document, fieldName, getSchema(extensions || this.defaultExtensions));
    }
}
const TiptapTransformer = new Tiptap();

export { ProsemirrorTransformer, Tiptap, TiptapTransformer };
//# sourceMappingURL=hocuspocus-transformer.esm.js.map
