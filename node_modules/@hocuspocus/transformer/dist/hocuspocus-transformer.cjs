'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var yjs = require('yjs');
var yProsemirror = require('y-prosemirror');
var prosemirrorModel = require('prosemirror-model');
var core = require('@tiptap/core');
var StarterKit = require('@tiptap/starter-kit');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var StarterKit__default = /*#__PURE__*/_interopDefaultLegacy(StarterKit);

class Prosemirror {
    constructor() {
        this.defaultSchema = new prosemirrorModel.Schema({
            nodes: {
                text: {},
                doc: { content: 'text*' },
            },
        });
    }
    schema(schema) {
        this.defaultSchema = schema;
        return this;
    }
    fromYdoc(document, fieldName) {
        const data = {};
        // allow a single field name
        if (typeof fieldName === 'string') {
            return yProsemirror.yDocToProsemirrorJSON(document, fieldName);
        }
        // default to all available fields if the given field name is empty
        if (fieldName === undefined || fieldName.length === 0) {
            fieldName = Array.from(document.share.keys());
        }
        fieldName.forEach(field => {
            // @ts-ignore
            data[field] = yProsemirror.yDocToProsemirrorJSON(document, field);
        });
        return data;
    }
    toYdoc(document, fieldName = 'prosemirror', schema) {
        if (!document) {
            throw new Error(`Youâ€™ve passed an empty or invalid document to the Transformer. Make sure to pass ProseMirror-compatible JSON. Actually passed JSON: ${document}`);
        }
        // allow a single field name
        if (typeof fieldName === 'string') {
            return yProsemirror.prosemirrorJSONToYDoc(schema || this.defaultSchema, document, fieldName);
        }
        const ydoc = new yjs.Doc();
        fieldName.forEach(field => {
            const update = yjs.encodeStateAsUpdate(yProsemirror.prosemirrorJSONToYDoc(schema || this.defaultSchema, document, field));
            yjs.applyUpdate(ydoc, update);
        });
        return ydoc;
    }
}
const ProsemirrorTransformer = new Prosemirror();

class Tiptap {
    constructor() {
        this.defaultExtensions = [
            StarterKit__default["default"],
        ];
    }
    extensions(extensions) {
        this.defaultExtensions = extensions;
        return this;
    }
    fromYdoc(document, fieldName) {
        return ProsemirrorTransformer.fromYdoc(document, fieldName);
    }
    toYdoc(document, fieldName = 'default', extensions) {
        return ProsemirrorTransformer.toYdoc(document, fieldName, core.getSchema(extensions || this.defaultExtensions));
    }
}
const TiptapTransformer = new Tiptap();

exports.ProsemirrorTransformer = ProsemirrorTransformer;
exports.Tiptap = Tiptap;
exports.TiptapTransformer = TiptapTransformer;
//# sourceMappingURL=hocuspocus-transformer.cjs.map
